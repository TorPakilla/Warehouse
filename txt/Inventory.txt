package main

import (
	"time"

	"github.com/google/uuid"
	"gorm.io/gorm"
)

type Supply struct {
	ID          string   `gorm:"type:uuid;primaryKey" json:"id"`
	Name        string   `json:"name"`
	Description string   `json:"description"`
	Price       float64  `json:"price"`
	Unit        int      `json:"unit"`
	SupplierID  string   `gorm:"type:uuid;not null" json:"supplier_id"`
	Supplier    Supplier `gorm:"foreignKey:SupplierID" json:"supplier"`
	Status      string   `json:"status"`
}

func (Supply) TableName() string {
	return "Supply"
}

func (s *Supply) BeforeCreate(tx *gorm.DB) (err error) {
	s.ID = uuid.New().String()
	return
}

type Supplier struct {
	ID          string   `gorm:"type:uuid;primaryKey" json:"id"`
	Name        string   `gorm:"uniqueIndex;not null" json:"name"` // เพิ่ม unique constraint ที่ Name
	Description string   `json:"description"`
	Supplies    []Supply `gorm:"foreignKey:SupplierID" json:"supplies"`
}

func (Supplier) TableName() string {
	return "Supplier"
}

func (s *Supplier) BeforeCreate(tx *gorm.DB) (err error) {
	s.ID = uuid.New().String()
	return
}

type Product struct {
	ID          string  `gorm:"type:uuid;primaryKey" json:"id"`
	SupplierID  string  `gorm:"type:uuid" json:"supplierID"`
	Name        string  `json:"name"`
	Description string  `json:"description"`
	Price       float64 `json:"price"`
	Unit        int     `json:"unit"`
}

func (Product) TableName() string {
	return "Product"
}

func (s *Product) BeforeCreate(tx *gorm.DB) (err error) {
	s.ID = uuid.New().String()
	return
}

type PickingOrders struct {
	ID          string    `gorm:"type:uuid;primaryKey" json:"id"`
	OrdersDate  time.Time `json:"orders_date"`
	TotalAmount int       `json:"total_amount"`
	CreatedAt   time.Time `json:"created_at"`
}

func (PickingOrders) TableName() string {
	return "PickingOrders"
}

func (s *PickingOrders) BeforeCreate(tx *gorm.DB) (err error) {
	s.ID = uuid.New().String()
	return
}
